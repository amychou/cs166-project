#ifndef Tango
#define Tango

class Tango{
 public:
  explicit Tango();
  ~Tango();

  bool contains(std::size_t key);

  static std::string name(){
    return "Tango Tree";
  }

 private:
  struct Node{
    std::size_t key;
    Node* p;
    Node* left;
    Node* right;
    std::size_t d;
    std::size_t min_d;
    std::size_t max_d;
    bool is_root;
    bool is_red;
  };

  mutable Node* root;

  static Node* treeFor(std::size_t low, std::size_t high, std::size_t depth, bool is_root);

  Node* search(size_t key);
  Node** cut(Node* root, std::size_t depth);
  Node* join(Node* n1, Node* n2);
  Node* concatenate(Node* n1, Node* n2);
  Node* split(Node* root, Node* k);
  void check(Node* r);

  Tango(Tango const &) = delete;
  void operator=(Tango const &) = delete;
};

#endif
